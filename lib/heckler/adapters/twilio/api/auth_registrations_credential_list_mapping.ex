# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.AuthRegistrationsCredentialListMapping do
  @moduledoc """
  API calls for all endpoints tagged `AuthRegistrationsCredentialListMapping`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a new credential list mapping resource

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
  - `domain_sid` (String.t): The SID of the SIP domain that will contain the new resource.
  - `credential_list_sid` (String.t): The SID of the CredentialList resource to map to the SIP domain.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_sip_auth_registrations_credential_list_mapping(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Heckler.Adapters.Twilio.Model.AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping.t()}
          | {:error, Tesla.Env.t()}
  def create_sip_auth_registrations_credential_list_mapping(
        connection,
        account_sid,
        domain_sid,
        credential_list_sid,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/Domains/#{domain_sid}/Auth/Registrations/CredentialListMappings.json"
      )
      |> add_param(:form, :CredentialListSid, credential_list_sid)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201,
       Heckler.Adapters.Twilio.Model.AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping}
    ])
  end

  @doc """
  Delete a credential list mapping from the requested domain

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to delete.
  - `domain_sid` (String.t): The SID of the SIP domain that contains the resources to delete.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the CredentialListMapping resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_sip_auth_registrations_credential_list_mapping(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_sip_auth_registrations_credential_list_mapping(
        connection,
        account_sid,
        domain_sid,
        sid,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/Domains/#{domain_sid}/Auth/Registrations/CredentialListMappings/#{sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch a specific instance of a credential list mapping

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resource to fetch.
  - `domain_sid` (String.t): The SID of the SIP domain that contains the resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the CredentialListMapping resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_sip_auth_registrations_credential_list_mapping(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Heckler.Adapters.Twilio.Model.AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping.t()}
          | {:error, Tesla.Env.t()}
  def fetch_sip_auth_registrations_credential_list_mapping(
        connection,
        account_sid,
        domain_sid,
        sid,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/Domains/#{domain_sid}/Auth/Registrations/CredentialListMappings/#{sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Heckler.Adapters.Twilio.Model.AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping}
    ])
  end

  @doc """
  Retrieve a list of credential list mappings belonging to the domain used in the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the CredentialListMapping resources to read.
  - `domain_sid` (String.t): The SID of the SIP domain that contains the resources to read.
  - `opts` (keyword): Optional parameters
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListSipAuthRegistrationsCredentialListMappingResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_sip_auth_registrations_credential_list_mapping(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Heckler.Adapters.Twilio.Model.ListSipAuthRegistrationsCredentialListMappingResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_sip_auth_registrations_credential_list_mapping(
        connection,
        account_sid,
        domain_sid,
        opts \\ []
      ) do
    optional_params = %{
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/Domains/#{domain_sid}/Auth/Registrations/CredentialListMappings.json"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListSipAuthRegistrationsCredentialListMappingResponse}
    ])
  end
end
