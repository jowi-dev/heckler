# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Conference do
  @moduledoc """
  API calls for all endpoints tagged `Conference`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Fetch an instance of a conference

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Conference resource to fetch
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConference.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_conference(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConference.t()} | {:error, Tesla.Env.t()}
  def fetch_conference(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Conferences/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConference}
    ])
  end

  @doc """
  Retrieve a list of conferences belonging to the account used to make the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to read.
  - `opts` (keyword): Optional parameters
    - `:DateCreated` (Date.t): Only include conferences that were created on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read conferences that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read conferences that were created on or after midnight of this date.
    - `:"DateCreated<"` (Date.t): Only include conferences that were created on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read conferences that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read conferences that were created on or after midnight of this date.
    - `:"DateCreated>"` (Date.t): Only include conferences that were created on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read conferences that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read conferences that were created on or after midnight of this date.
    - `:DateUpdated` (Date.t): Only include conferences that were last updated on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were last updated on this date. You can also specify an inequality, such as `DateUpdated<=YYYY-MM-DD`, to read conferences that were last updated on or before midnight of this date, and `DateUpdated>=YYYY-MM-DD` to read conferences that were last updated on or after midnight of this date.
    - `:"DateUpdated<"` (Date.t): Only include conferences that were last updated on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were last updated on this date. You can also specify an inequality, such as `DateUpdated<=YYYY-MM-DD`, to read conferences that were last updated on or before midnight of this date, and `DateUpdated>=YYYY-MM-DD` to read conferences that were last updated on or after midnight of this date.
    - `:"DateUpdated>"` (Date.t): Only include conferences that were last updated on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only conferences that were last updated on this date. You can also specify an inequality, such as `DateUpdated<=YYYY-MM-DD`, to read conferences that were last updated on or before midnight of this date, and `DateUpdated>=YYYY-MM-DD` to read conferences that were last updated on or after midnight of this date.
    - `:FriendlyName` (String.t): The string that identifies the Conference resources to read.
    - `:Status` (ConferenceEnumStatus): The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListConferenceResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_conference(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListConferenceResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_conference(connection, account_sid, opts \\ []) do
    optional_params = %{
      :DateCreated => :query,
      :"DateCreated&lt;" => :query,
      :"DateCreated&gt;" => :query,
      :DateUpdated => :query,
      :"DateUpdated&lt;" => :query,
      :"DateUpdated&gt;" => :query,
      :FriendlyName => :query,
      :Status => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Conferences.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListConferenceResponse}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference resource(s) to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Conference resource to update
  - `opts` (keyword): Optional parameters
    - `:Status` (Heckler.Adapters.Twilio.Model.ConferenceEnumUpdateStatus.t): 
    - `:AnnounceUrl` (String.t): The URL we should call to announce something into the conference. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    - `:AnnounceMethod` (String.t): The HTTP method used to call `announce_url`. Can be: `GET` or `POST` and the default is `POST`

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConference.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_conference(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConference.t()} | {:error, Tesla.Env.t()}
  def update_conference(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :Status => :form,
      :AnnounceUrl => :form,
      :AnnounceMethod => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Conferences/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConference}
    ])
  end
end
