# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.CallTranscription do
  @moduledoc """
  API calls for all endpoints tagged `CallTranscription`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a Transcription

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Transcription resource.
  - `call_sid` (String.t): The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with.
  - `opts` (keyword): Optional parameters
    - `:Name` (String.t): The user-specified name of this Transcription, if one was given when the Transcription was created. This may be used to stop the Transcription.
    - `:Track` (Heckler.Adapters.Twilio.Model.RealtimeTranscriptionEnumTrack.t): 
    - `:StatusCallbackUrl` (String.t): Absolute URL of the status callback.
    - `:StatusCallbackMethod` (String.t): The http method for the status_callback (one of GET, POST).
    - `:InboundTrackLabel` (String.t): Friendly name given to the Inbound Track
    - `:OutboundTrackLabel` (String.t): Friendly name given to the Outbound Track
    - `:PartialResults` (boolean()): Indicates if partial results are going to be sent to the customer
    - `:LanguageCode` (String.t): Language code used by the transcription engine, specified in [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) format
    - `:TranscriptionEngine` (String.t): Definition of the transcription engine to be used, among those supported by Twilio
    - `:ProfanityFilter` (boolean()): indicates if the server will attempt to filter out profanities, replacing all but the initial character in each filtered word with asterisks
    - `:SpeechModel` (String.t): Recognition model used by the transcription engine, among those supported by the provider
    - `:Hints` (String.t): A Phrase contains words and phrase \\\"hints\\\" so that the speech recognition engine is more likely to recognize them.
    - `:EnableAutomaticPunctuation` (boolean()): The provider will add punctuation to recognition result
    - `:IntelligenceService` (String.t): The SID of the [Voice Intelligence Service](https://www.twilio.com/docs/voice/intelligence/api/service-resource) for persisting transcripts and running post-call Language Operators .

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCallRealtimeTranscription.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_realtime_transcription(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCallRealtimeTranscription.t()}
          | {:error, Tesla.Env.t()}
  def create_realtime_transcription(connection, account_sid, call_sid, opts \\ []) do
    optional_params = %{
      :Name => :form,
      :Track => :form,
      :StatusCallbackUrl => :form,
      :StatusCallbackMethod => :form,
      :InboundTrackLabel => :form,
      :OutboundTrackLabel => :form,
      :PartialResults => :form,
      :LanguageCode => :form,
      :TranscriptionEngine => :form,
      :ProfanityFilter => :form,
      :SpeechModel => :form,
      :Hints => :form,
      :EnableAutomaticPunctuation => :form,
      :IntelligenceService => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/Transcriptions.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountCallRealtimeTranscription}
    ])
  end

  @doc """
  Stop a Transcription using either the SID of the Transcription resource or the `name` used when creating the resource

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created this Transcription resource.
  - `call_sid` (String.t): The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the Transcription resource is associated with.
  - `sid` (String.t): The SID of the Transcription resource, or the `name` used when creating the resource
  - `status` (Heckler.Adapters.Twilio.Model.RealtimeTranscriptionEnumUpdateStatus.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCallRealtimeTranscription.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_realtime_transcription(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          Heckler.Adapters.Twilio.Model.RealtimeTranscriptionEnumUpdateStatus.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCallRealtimeTranscription.t()}
          | {:error, Tesla.Env.t()}
  def update_realtime_transcription(connection, account_sid, call_sid, sid, status, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/Transcriptions/#{sid}.json")
      |> add_param(:form, :Status, status)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountCallRealtimeTranscription}
    ])
  end
end
