# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.CallRecording do
  @moduledoc """
  API calls for all endpoints tagged `CallRecording`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a recording for the call

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
  - `call_sid` (String.t): The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) to associate the resource with.
  - `opts` (keyword): Optional parameters
    - `:RecordingStatusCallbackEvent` ([String.t]): The recording status events on which we should call the `recording_status_callback` URL. Can be: `in-progress`, `completed` and `absent` and the default is `completed`. Separate multiple event values with a space.
    - `:RecordingStatusCallback` (String.t): The URL we should call using the `recording_status_callback_method` on each recording event specified in  `recording_status_callback_event`. For more information, see [RecordingStatusCallback parameters](https://www.twilio.com/docs/voice/api/recording#recordingstatuscallback).
    - `:RecordingStatusCallbackMethod` (String.t): The HTTP method we should use to call `recording_status_callback`. Can be: `GET` or `POST` and the default is `POST`.
    - `:Trim` (String.t): Whether to trim any leading and trailing silence in the recording. Can be: `trim-silence` or `do-not-trim` and the default is `do-not-trim`. `trim-silence` trims the silence from the beginning and end of the recording and `do-not-trim` does not.
    - `:RecordingChannels` (String.t): The number of channels used in the recording. Can be: `mono` or `dual` and the default is `mono`. `mono` records all parties of the call into one channel. `dual` records each party of a 2-party call into separate channels.
    - `:RecordingTrack` (String.t): The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCallCallRecording.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_call_recording(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCallCallRecording.t()}
          | {:error, Tesla.Env.t()}
  def create_call_recording(connection, account_sid, call_sid, opts \\ []) do
    optional_params = %{
      :RecordingStatusCallbackEvent => :form,
      :RecordingStatusCallback => :form,
      :RecordingStatusCallbackMethod => :form,
      :Trim => :form,
      :RecordingChannels => :form,
      :RecordingTrack => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/Recordings.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountCallCallRecording}
    ])
  end

  @doc """
  Delete a recording from your account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to delete.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Recording resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_call_recording(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_call_recording(connection, account_sid, call_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/Recordings/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch an instance of a recording for a call

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Recording resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCallCallRecording.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_call_recording(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCallCallRecording.t()}
          | {:error, Tesla.Env.t()}
  def fetch_call_recording(connection, account_sid, call_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/Recordings/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountCallCallRecording}
    ])
  end

  @doc """
  Retrieve a list of recordings belonging to the call used to make the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
  - `opts` (keyword): Optional parameters
    - `:DateCreated` (Date.t): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    - `:"DateCreated<"` (Date.t): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    - `:"DateCreated>"` (Date.t): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListCallRecordingResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_call_recording(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListCallRecordingResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_call_recording(connection, account_sid, call_sid, opts \\ []) do
    optional_params = %{
      :DateCreated => :query,
      :"DateCreated&lt;" => :query,
      :"DateCreated&gt;" => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/Recordings.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListCallRecordingResponse}
    ])
  end

  @doc """
  Changes the status of the recording to paused, stopped, or in-progress. Note: Pass `Twilio.CURRENT` instead of recording sid to reference current active recording.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to update.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Recording resource to update.
  - `status` (Heckler.Adapters.Twilio.Model.CallRecordingEnumStatus.t): 
  - `opts` (keyword): Optional parameters
    - `:PauseBehavior` (String.t): Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCallCallRecording.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_call_recording(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          Heckler.Adapters.Twilio.Model.CallRecordingEnumStatus.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCallCallRecording.t()}
          | {:error, Tesla.Env.t()}
  def update_call_recording(connection, account_sid, call_sid, sid, status, opts \\ []) do
    optional_params = %{
      :PauseBehavior => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/Recordings/#{sid}.json")
      |> add_param(:form, :Status, status)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountCallCallRecording}
    ])
  end
end
