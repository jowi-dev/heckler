# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.IncomingPhoneNumberTollFree do
  @moduledoc """
  API calls for all endpoints tagged `IncomingPhoneNumberTollFree`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
  - `phone_number` (String.t): The phone number to purchase specified in [E.164](https://www.twilio.com/docs/glossary/what-e164) format.  E.164 phone numbers consist of a + followed by the country code and subscriber number without punctuation characters. For example, +14155551234.
  - `opts` (keyword): Optional parameters
    - `:ApiVersion` (String.t): The API version to use for incoming calls made to the new phone number. The default is `2010-04-01`.
    - `:FriendlyName` (String.t): A descriptive string that you created to describe the new phone number. It can be up to 64 characters long. By default, this is a formatted version of the phone number.
    - `:SmsApplicationSid` (String.t): The SID of the application that should handle SMS messages sent to the new phone number. If an `sms_application_sid` is present, we ignore all `sms_*_url` values and use those of the application.
    - `:SmsFallbackMethod` (String.t): The HTTP method that we should use to call `sms_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:SmsFallbackUrl` (String.t): The URL that we should call when an error occurs while requesting or executing the TwiML defined by `sms_url`.
    - `:SmsMethod` (String.t): The HTTP method that we should use to call `sms_url`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:SmsUrl` (String.t): The URL we should call when the new phone number receives an incoming SMS message.
    - `:StatusCallback` (String.t): The URL we should call using the `status_callback_method` to send status information to your application.
    - `:StatusCallbackMethod` (String.t): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:VoiceApplicationSid` (String.t): The SID of the application we should use to handle calls to the new phone number. If a `voice_application_sid` is present, we ignore all of the voice urls and use those set on the application. Setting a `voice_application_sid` will automatically delete your `trunk_sid` and vice versa.
    - `:VoiceCallerIdLookup` (boolean()): Whether to lookup the caller's name from the CNAM database and post it to your app. Can be: `true` or `false` and defaults to `false`.
    - `:VoiceFallbackMethod` (String.t): The HTTP method that we should use to call `voice_fallback_url`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:VoiceFallbackUrl` (String.t): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    - `:VoiceMethod` (String.t): The HTTP method that we should use to call `voice_url`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:VoiceUrl` (String.t): The URL that we should call to answer a call to the new phone number. The `voice_url` will not be called if a `voice_application_sid` or a `trunk_sid` is set.
    - `:IdentitySid` (String.t): The SID of the Identity resource that we should associate with the new phone number. Some regions require an Identity to meet local regulations.
    - `:AddressSid` (String.t): The SID of the Address resource we should associate with the new phone number. Some regions require addresses to meet local regulations.
    - `:EmergencyStatus` (Heckler.Adapters.Twilio.Model.IncomingPhoneNumberTollFreeEnumEmergencyStatus.t): 
    - `:EmergencyAddressSid` (String.t): The SID of the emergency address configuration to use for emergency calling from the new phone number.
    - `:TrunkSid` (String.t): The SID of the Trunk we should use to handle calls to the new phone number. If a `trunk_sid` is present, we ignore all of the voice urls and voice applications and use only those set on the Trunk. Setting a `trunk_sid` will automatically delete your `voice_application_sid` and vice versa.
    - `:VoiceReceiveMode` (Heckler.Adapters.Twilio.Model.IncomingPhoneNumberTollFreeEnumVoiceReceiveMode.t): 
    - `:BundleSid` (String.t): The SID of the Bundle resource that you associate with the phone number. Some regions require a Bundle to meet local Regulations.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountIncomingPhoneNumberIncomingPhoneNumberTollFree.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_incoming_phone_number_toll_free(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Heckler.Adapters.Twilio.Model.AccountIncomingPhoneNumberIncomingPhoneNumberTollFree.t()}
          | {:error, Tesla.Env.t()}
  def create_incoming_phone_number_toll_free(connection, account_sid, phone_number, opts \\ []) do
    optional_params = %{
      :ApiVersion => :form,
      :FriendlyName => :form,
      :SmsApplicationSid => :form,
      :SmsFallbackMethod => :form,
      :SmsFallbackUrl => :form,
      :SmsMethod => :form,
      :SmsUrl => :form,
      :StatusCallback => :form,
      :StatusCallbackMethod => :form,
      :VoiceApplicationSid => :form,
      :VoiceCallerIdLookup => :form,
      :VoiceFallbackMethod => :form,
      :VoiceFallbackUrl => :form,
      :VoiceMethod => :form,
      :VoiceUrl => :form,
      :IdentitySid => :form,
      :AddressSid => :form,
      :EmergencyStatus => :form,
      :EmergencyAddressSid => :form,
      :TrunkSid => :form,
      :VoiceReceiveMode => :form,
      :BundleSid => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/IncomingPhoneNumbers/TollFree.json")
      |> add_param(:form, :PhoneNumber, phone_number)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountIncomingPhoneNumberIncomingPhoneNumberTollFree}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the resources to read.
  - `opts` (keyword): Optional parameters
    - `:Beta` (boolean()): Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
    - `:FriendlyName` (String.t): A string that identifies the resources to read.
    - `:PhoneNumber` (String.t): The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
    - `:Origin` (String.t): Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListIncomingPhoneNumberTollFreeResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_incoming_phone_number_toll_free(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListIncomingPhoneNumberTollFreeResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_incoming_phone_number_toll_free(connection, account_sid, opts \\ []) do
    optional_params = %{
      :Beta => :query,
      :FriendlyName => :query,
      :PhoneNumber => :query,
      :Origin => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/IncomingPhoneNumbers/TollFree.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListIncomingPhoneNumberTollFreeResponse}
    ])
  end
end
