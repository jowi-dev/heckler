# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Call do
  @moduledoc """
  API calls for all endpoints tagged `Call`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a new outgoing call to phones, SIP-enabled endpoints or Twilio Client connections

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
  - `to` (String.t): The phone number, SIP address, or client identifier to call.
  - `from` (String.t): The phone number or client identifier to use as the caller id. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `From` must also be a phone number.
  - `opts` (keyword): Optional parameters
    - `:Method` (String.t): The HTTP method we should use when calling the `url` parameter's value. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:FallbackUrl` (String.t): The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:FallbackMethod` (String.t): The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:StatusCallback` (String.t): The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    - `:StatusCallbackEvent` ([String.t]): The call progress events that we will send to the `status_callback` URL. Can be: `initiated`, `ringing`, `answered`, and `completed`. If no event is specified, we send the `completed` status. If you want to receive multiple events, specify each one in a separate `status_callback_event` parameter. See the code sample for [monitoring call progress](https://www.twilio.com/docs/voice/api/call-resource?code-sample=code-create-a-call-resource-and-specify-a-statuscallbackevent&code-sdk-version=json). If an `application_sid` is present, this parameter is ignored.
    - `:StatusCallbackMethod` (String.t): The HTTP method we should use when calling the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:SendDigits` (String.t): A string of keys to dial after connecting to the number, maximum of 32 digits. Valid digits in the string include: any digit (`0`-`9`), '`#`', '`*`' and '`w`', to insert a half second pause. For example, if you connected to a company phone number and wanted to pause for one second, and then dial extension 1234 followed by the pound key, the value of this parameter would be `ww1234#`. Remember to URL-encode this string, since the '`#`' character has special meaning in a URL. If both `SendDigits` and `MachineDetection` parameters are provided, then `MachineDetection` will be ignored.
    - `:Timeout` (integer()): The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.
    - `:Record` (boolean()): Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`. The `recording_url` is sent to the `status_callback` URL.
    - `:RecordingChannels` (String.t): The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.
    - `:RecordingStatusCallback` (String.t): The URL that we call when the recording is available to be accessed.
    - `:RecordingStatusCallbackMethod` (String.t): The HTTP method we should use when calling the `recording_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
    - `:SipAuthUsername` (String.t): The username used to authenticate the caller making a SIP call.
    - `:SipAuthPassword` (String.t): The password required to authenticate the user account specified in `sip_auth_username`.
    - `:MachineDetection` (String.t): Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. If `send_digits` is provided, this parameter is ignored. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    - `:MachineDetectionTimeout` (integer()): The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    - `:RecordingStatusCallbackEvent` ([String.t]): The recording status events that will trigger calls to the URL specified in `recording_status_callback`. Can be: `in-progress`, `completed` and `absent`. Defaults to `completed`. Separate  multiple values with a space.
    - `:Trim` (String.t): Whether to trim any leading and trailing silence from the recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    - `:CallerId` (String.t): The phone number, SIP address, or Client identifier that made this call. Phone numbers are in [E.164 format](https://wwnw.twilio.com/docs/glossary/what-e164) (e.g., +16175551212). SIP addresses are formatted as `name@company.com`.
    - `:MachineDetectionSpeechThreshold` (integer()): The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    - `:MachineDetectionSpeechEndThreshold` (integer()): The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    - `:MachineDetectionSilenceTimeout` (integer()): The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    - `:AsyncAmd` (String.t): Select whether to perform answering machine detection in the background. Default, blocks the execution of the call until Answering Machine Detection is completed. Can be: `true` or `false`.
    - `:AsyncAmdStatusCallback` (String.t): The URL that we should call using the `async_amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    - `:AsyncAmdStatusCallbackMethod` (String.t): The HTTP method we should use when calling the `async_amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
    - `:Byoc` (String.t): The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    - `:CallReason` (String.t): The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    - `:CallToken` (String.t): A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.
    - `:RecordingTrack` (String.t): The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is generated from Twilio. `both` records the audio that is received and generated by Twilio.
    - `:TimeLimit` (integer()): The maximum duration of the call in seconds. Constraints depend on account and configuration.
    - `:Url` (String.t): The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    - `:Twiml` (String.t): TwiML instructions for the call Twilio will use without fetching Twiml from url parameter. If both `twiml` and `url` are provided then `twiml` parameter will be ignored. Max 4000 characters.
    - `:ApplicationSid` (String.t): The SID of the Application resource that will handle the call, if the call will be handled by an application.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCall.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_call(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCall.t()} | {:error, Tesla.Env.t()}
  def create_call(connection, account_sid, to, from, opts \\ []) do
    optional_params = %{
      :Method => :form,
      :FallbackUrl => :form,
      :FallbackMethod => :form,
      :StatusCallback => :form,
      :StatusCallbackEvent => :form,
      :StatusCallbackMethod => :form,
      :SendDigits => :form,
      :Timeout => :form,
      :Record => :form,
      :RecordingChannels => :form,
      :RecordingStatusCallback => :form,
      :RecordingStatusCallbackMethod => :form,
      :SipAuthUsername => :form,
      :SipAuthPassword => :form,
      :MachineDetection => :form,
      :MachineDetectionTimeout => :form,
      :RecordingStatusCallbackEvent => :form,
      :Trim => :form,
      :CallerId => :form,
      :MachineDetectionSpeechThreshold => :form,
      :MachineDetectionSpeechEndThreshold => :form,
      :MachineDetectionSilenceTimeout => :form,
      :AsyncAmd => :form,
      :AsyncAmdStatusCallback => :form,
      :AsyncAmdStatusCallbackMethod => :form,
      :Byoc => :form,
      :CallReason => :form,
      :CallToken => :form,
      :RecordingTrack => :form,
      :TimeLimit => :form,
      :Url => :form,
      :Twiml => :form,
      :ApplicationSid => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls.json")
      |> add_param(:form, :To, to)
      |> add_param(:form, :From, from)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountCall}
    ])
  end

  @doc """
  Delete a Call record from your account. Once the record is deleted, it will no longer appear in the API and Account Portal logs.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to delete.
  - `sid` (String.t): The Twilio-provided Call SID that uniquely identifies the Call resource to delete
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_call(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_call(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch the call specified by the provided Call SID

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to fetch.
  - `sid` (String.t): The SID of the Call resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCall.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_call(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCall.t()} | {:error, Tesla.Env.t()}
  def fetch_call(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountCall}
    ])
  end

  @doc """
  Retrieves a collection of calls made to and from your account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to read.
  - `opts` (keyword): Optional parameters
    - `:To` (String.t): Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
    - `:From` (String.t): Only include calls from this phone number, SIP address, Client identifier or SIM SID.
    - `:ParentCallSid` (String.t): Only include calls spawned by calls with this SID.
    - `:Status` (CallEnumStatus): The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
    - `:StartTime` (DateTime.t): Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    - `:"StartTime<"` (DateTime.t): Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    - `:"StartTime>"` (DateTime.t): Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
    - `:EndTime` (DateTime.t): Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    - `:"EndTime<"` (DateTime.t): Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    - `:"EndTime>"` (DateTime.t): Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in UTC, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListCallResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_call(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListCallResponse.t()} | {:error, Tesla.Env.t()}
  def list_call(connection, account_sid, opts \\ []) do
    optional_params = %{
      :To => :query,
      :From => :query,
      :ParentCallSid => :query,
      :Status => :query,
      :StartTime => :query,
      :"StartTime&lt;" => :query,
      :"StartTime&gt;" => :query,
      :EndTime => :query,
      :"EndTime&lt;" => :query,
      :"EndTime&gt;" => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListCallResponse}
    ])
  end

  @doc """
  Initiates a call redirect or terminates a call

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Call resource(s) to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Call resource to update
  - `opts` (keyword): Optional parameters
    - `:Url` (String.t): The absolute URL that returns the TwiML instructions for the call. We will call this URL using the `method` when the call connects. For more information, see the [Url Parameter](https://www.twilio.com/docs/voice/make-calls#specify-a-url-parameter) section in [Making Calls](https://www.twilio.com/docs/voice/make-calls).
    - `:Method` (String.t): The HTTP method we should use when calling the `url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:Status` (Heckler.Adapters.Twilio.Model.CallEnumUpdateStatus.t): 
    - `:FallbackUrl` (String.t): The URL that we call using the `fallback_method` if an error occurs when requesting or executing the TwiML at `url`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:FallbackMethod` (String.t): The HTTP method that we should use to request the `fallback_url`. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:StatusCallback` (String.t): The URL we should call using the `status_callback_method` to send status information to your application. If no `status_callback_event` is specified, we will send the `completed` status. If an `application_sid` parameter is present, this parameter is ignored. URLs must contain a valid hostname (underscores are not permitted).
    - `:StatusCallbackMethod` (String.t): The HTTP method we should use when requesting the `status_callback` URL. Can be: `GET` or `POST` and the default is `POST`. If an `application_sid` parameter is present, this parameter is ignored.
    - `:Twiml` (String.t): TwiML instructions for the call Twilio will use without fetching Twiml from url. Twiml and url parameters are mutually exclusive
    - `:TimeLimit` (integer()): The maximum duration of the call in seconds. Constraints depend on account and configuration.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCall.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_call(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCall.t()} | {:error, Tesla.Env.t()}
  def update_call(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :Url => :form,
      :Method => :form,
      :Status => :form,
      :FallbackUrl => :form,
      :FallbackMethod => :form,
      :StatusCallback => :form,
      :StatusCallbackMethod => :form,
      :Twiml => :form,
      :TimeLimit => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Calls/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountCall}
    ])
  end
end
