# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.ConferenceRecording do
  @moduledoc """
  API calls for all endpoints tagged `ConferenceRecording`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Delete a recording from your account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to delete.
  - `conference_sid` (String.t): The Conference SID that identifies the conference associated with the recording to delete.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Conference Recording resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_conference_recording(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_conference_recording(connection, account_sid, conference_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Recordings/#{sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch an instance of a recording for a call

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to fetch.
  - `conference_sid` (String.t): The Conference SID that identifies the conference associated with the recording to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Conference Recording resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConferenceConferenceRecording.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_conference_recording(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConferenceConferenceRecording.t()}
          | {:error, Tesla.Env.t()}
  def fetch_conference_recording(connection, account_sid, conference_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Recordings/#{sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConferenceConferenceRecording}
    ])
  end

  @doc """
  Retrieve a list of recordings belonging to the call used to make the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resources to read.
  - `conference_sid` (String.t): The Conference SID that identifies the conference associated with the recording to read.
  - `opts` (keyword): Optional parameters
    - `:DateCreated` (Date.t): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    - `:"DateCreated<"` (Date.t): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    - `:"DateCreated>"` (Date.t): The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListConferenceRecordingResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_conference_recording(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListConferenceRecordingResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_conference_recording(connection, account_sid, conference_sid, opts \\ []) do
    optional_params = %{
      :DateCreated => :query,
      :"DateCreated&lt;" => :query,
      :"DateCreated&gt;" => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Recordings.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListConferenceRecordingResponse}
    ])
  end

  @doc """
  Changes the status of the recording to paused, stopped, or in-progress. Note: To use `Twilio.CURRENT`, pass it as recording sid.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Conference Recording resource to update.
  - `conference_sid` (String.t): The Conference SID that identifies the conference associated with the recording to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Conference Recording resource to update. Use `Twilio.CURRENT` to reference the current active recording.
  - `status` (Heckler.Adapters.Twilio.Model.ConferenceRecordingEnumStatus.t): 
  - `opts` (keyword): Optional parameters
    - `:PauseBehavior` (String.t): Whether to record during a pause. Can be: `skip` or `silence` and the default is `silence`. `skip` does not record during the pause period, while `silence` will replace the actual audio of the call with silence during the pause period. This parameter only applies when setting `status` is set to `paused`.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConferenceConferenceRecording.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_conference_recording(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          Heckler.Adapters.Twilio.Model.ConferenceRecordingEnumStatus.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConferenceConferenceRecording.t()}
          | {:error, Tesla.Env.t()}
  def update_conference_recording(
        connection,
        account_sid,
        conference_sid,
        sid,
        status,
        opts \\ []
      ) do
    optional_params = %{
      :PauseBehavior => :form
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Recordings/#{sid}.json"
      )
      |> add_param(:form, :Status, status)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConferenceConferenceRecording}
    ])
  end
end
