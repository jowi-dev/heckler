# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Trigger do
  @moduledoc """
  API calls for all endpoints tagged `Trigger`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a new UsageTrigger

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
  - `callback_url` (String.t): The URL we should call using `callback_method` when the trigger fires.
  - `trigger_value` (String.t): The usage value at which the trigger should fire.  For convenience, you can use an offset value such as `+30` to specify a trigger_value that is 30 units more than the current usage value. Be sure to urlencode a `+` as `%2B`.
  - `usage_category` (Heckler.Adapters.Twilio.Model.UsageTriggerEnumUsageCategory.t): 
  - `opts` (keyword): Optional parameters
    - `:CallbackMethod` (String.t): The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.
    - `:FriendlyName` (String.t): A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    - `:Recurring` (Heckler.Adapters.Twilio.Model.UsageTriggerEnumRecurring.t): 
    - `:TriggerBy` (Heckler.Adapters.Twilio.Model.UsageTriggerEnumTriggerField.t): 

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_usage_trigger(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          Heckler.Adapters.Twilio.Model.UsageTriggerEnumUsageCategory.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger.t()}
          | {:error, Tesla.Env.t()}
  def create_usage_trigger(
        connection,
        account_sid,
        callback_url,
        trigger_value,
        usage_category,
        opts \\ []
      ) do
    optional_params = %{
      :CallbackMethod => :form,
      :FriendlyName => :form,
      :Recurring => :form,
      :TriggerBy => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Usage/Triggers.json")
      |> add_param(:form, :CallbackUrl, callback_url)
      |> add_param(:form, :TriggerValue, trigger_value)
      |> add_param(:form, :UsageCategory, usage_category)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to delete.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the UsageTrigger resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_usage_trigger(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_usage_trigger(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/Usage/Triggers/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch and instance of a usage-trigger

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the UsageTrigger resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_usage_trigger(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger.t()}
          | {:error, Tesla.Env.t()}
  def fetch_usage_trigger(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Usage/Triggers/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger}
    ])
  end

  @doc """
  Retrieve a list of usage-triggers belonging to the account used to make the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to read.
  - `opts` (keyword): Optional parameters
    - `:Recurring` (UsageTriggerEnumRecurring): The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
    - `:TriggerBy` (UsageTriggerEnumTriggerField): The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
    - `:UsageCategory` (UsageTriggerEnumUsageCategory): The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListUsageTriggerResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_usage_trigger(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListUsageTriggerResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_usage_trigger(connection, account_sid, opts \\ []) do
    optional_params = %{
      :Recurring => :query,
      :TriggerBy => :query,
      :UsageCategory => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Usage/Triggers.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListUsageTriggerResponse}
    ])
  end

  @doc """
  Update an instance of a usage trigger

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the UsageTrigger resources to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the UsageTrigger resource to update.
  - `opts` (keyword): Optional parameters
    - `:CallbackMethod` (String.t): The HTTP method we should use to call `callback_url`. Can be: `GET` or `POST` and the default is `POST`.
    - `:CallbackUrl` (String.t): The URL we should call using `callback_method` when the trigger fires.
    - `:FriendlyName` (String.t): A descriptive string that you create to describe the resource. It can be up to 64 characters long.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_usage_trigger(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger.t()}
          | {:error, Tesla.Env.t()}
  def update_usage_trigger(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :CallbackMethod => :form,
      :CallbackUrl => :form,
      :FriendlyName => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Usage/Triggers/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountUsageUsageTrigger}
    ])
  end
end
