# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.SipIpAddress do
  @moduledoc """
  API calls for all endpoints tagged `SipIpAddress`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a new IpAddress resource.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
  - `ip_access_control_list_sid` (String.t): The IpAccessControlList Sid with which to associate the created IpAddress resource.
  - `friendly_name` (String.t): A human readable descriptive text for this resource, up to 255 characters long.
  - `ip_address` (String.t): An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
  - `opts` (keyword): Optional parameters
    - `:CidrPrefixLength` (integer()): An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_sip_ip_address(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress.t()}
          | {:error, Tesla.Env.t()}
  def create_sip_ip_address(
        connection,
        account_sid,
        ip_access_control_list_sid,
        friendly_name,
        ip_address,
        opts \\ []
      ) do
    optional_params = %{
      :CidrPrefixLength => :form
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/IpAccessControlLists/#{ip_access_control_list_sid}/IpAddresses.json"
      )
      |> add_param(:form, :FriendlyName, friendly_name)
      |> add_param(:form, :IpAddress, ip_address)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress}
    ])
  end

  @doc """
  Delete an IpAddress resource.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
  - `ip_access_control_list_sid` (String.t): The IpAccessControlList Sid that identifies the IpAddress resources to delete.
  - `sid` (String.t): A 34 character string that uniquely identifies the resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_sip_ip_address(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_sip_ip_address(connection, account_sid, ip_access_control_list_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/IpAccessControlLists/#{ip_access_control_list_sid}/IpAddresses/#{sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Read one IpAddress resource.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
  - `ip_access_control_list_sid` (String.t): The IpAccessControlList Sid that identifies the IpAddress resources to fetch.
  - `sid` (String.t): A 34 character string that uniquely identifies the IpAddress resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_sip_ip_address(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress.t()}
          | {:error, Tesla.Env.t()}
  def fetch_sip_ip_address(connection, account_sid, ip_access_control_list_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/IpAccessControlLists/#{ip_access_control_list_sid}/IpAddresses/#{sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress}
    ])
  end

  @doc """
  Read multiple IpAddress resources.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
  - `ip_access_control_list_sid` (String.t): The IpAccessControlList Sid that identifies the IpAddress resources to read.
  - `opts` (keyword): Optional parameters
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListSipIpAddressResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_sip_ip_address(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListSipIpAddressResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_sip_ip_address(connection, account_sid, ip_access_control_list_sid, opts \\ []) do
    optional_params = %{
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/IpAccessControlLists/#{ip_access_control_list_sid}/IpAddresses.json"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListSipIpAddressResponse}
    ])
  end

  @doc """
  Update an IpAddress resource.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the [Account](https://www.twilio.com/docs/iam/api/account) responsible for this resource.
  - `ip_access_control_list_sid` (String.t): The IpAccessControlList Sid that identifies the IpAddress resources to update.
  - `sid` (String.t): A 34 character string that identifies the IpAddress resource to update.
  - `opts` (keyword): Optional parameters
    - `:IpAddress` (String.t): An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
    - `:FriendlyName` (String.t): A human readable descriptive text for this resource, up to 255 characters long.
    - `:CidrPrefixLength` (integer()): An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_sip_ip_address(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress.t()}
          | {:error, Tesla.Env.t()}
  def update_sip_ip_address(connection, account_sid, ip_access_control_list_sid, sid, opts \\ []) do
    optional_params = %{
      :IpAddress => :form,
      :FriendlyName => :form,
      :CidrPrefixLength => :form
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/SIP/IpAccessControlLists/#{ip_access_control_list_sid}/IpAddresses/#{sid}.json"
      )
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountSipSipIpAccessControlListSipIpAddress}
    ])
  end
end
