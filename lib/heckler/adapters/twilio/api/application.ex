# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Application do
  @moduledoc """
  API calls for all endpoints tagged `Application`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a new application within your account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
  - `opts` (keyword): Optional parameters
    - `:ApiVersion` (String.t): The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is the account's default API version.
    - `:VoiceUrl` (String.t): The URL we should call when the phone number assigned to this application receives a call.
    - `:VoiceMethod` (String.t): The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
    - `:VoiceFallbackUrl` (String.t): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    - `:VoiceFallbackMethod` (String.t): The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
    - `:StatusCallback` (String.t): The URL we should call using the `status_callback_method` to send status information to your application.
    - `:StatusCallbackMethod` (String.t): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
    - `:VoiceCallerIdLookup` (boolean()): Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    - `:SmsUrl` (String.t): The URL we should call when the phone number receives an incoming SMS message.
    - `:SmsMethod` (String.t): The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
    - `:SmsFallbackUrl` (String.t): The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    - `:SmsFallbackMethod` (String.t): The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
    - `:SmsStatusCallback` (String.t): The URL we should call using a POST method to send status information about SMS messages sent by the application.
    - `:MessageStatusCallback` (String.t): The URL we should call using a POST method to send message status information to your application.
    - `:FriendlyName` (String.t): A descriptive string that you create to describe the new application. It can be up to 64 characters long.
    - `:PublicApplicationConnectEnabled` (boolean()): Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountApplication.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_application(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountApplication.t()} | {:error, Tesla.Env.t()}
  def create_application(connection, account_sid, opts \\ []) do
    optional_params = %{
      :ApiVersion => :form,
      :VoiceUrl => :form,
      :VoiceMethod => :form,
      :VoiceFallbackUrl => :form,
      :VoiceFallbackMethod => :form,
      :StatusCallback => :form,
      :StatusCallbackMethod => :form,
      :VoiceCallerIdLookup => :form,
      :SmsUrl => :form,
      :SmsMethod => :form,
      :SmsFallbackUrl => :form,
      :SmsFallbackMethod => :form,
      :SmsStatusCallback => :form,
      :MessageStatusCallback => :form,
      :FriendlyName => :form,
      :PublicApplicationConnectEnabled => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Applications.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountApplication}
    ])
  end

  @doc """
  Delete the application by the specified application sid

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to delete.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Application resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_application(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_application(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/Applications/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch the application specified by the provided sid

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Application resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountApplication.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_application(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountApplication.t()} | {:error, Tesla.Env.t()}
  def fetch_application(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Applications/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountApplication}
    ])
  end

  @doc """
  Retrieve a list of applications representing an application within the requesting account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to read.
  - `opts` (keyword): Optional parameters
    - `:FriendlyName` (String.t): The string that identifies the Application resources to read.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListApplicationResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_application(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListApplicationResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_application(connection, account_sid, opts \\ []) do
    optional_params = %{
      :FriendlyName => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Applications.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListApplicationResponse}
    ])
  end

  @doc """
  Updates the application's properties

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Application resources to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Application resource to update.
  - `opts` (keyword): Optional parameters
    - `:FriendlyName` (String.t): A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    - `:ApiVersion` (String.t): The API version to use to start a new TwiML session. Can be: `2010-04-01` or `2008-08-01`. The default value is your account's default API version.
    - `:VoiceUrl` (String.t): The URL we should call when the phone number assigned to this application receives a call.
    - `:VoiceMethod` (String.t): The HTTP method we should use to call `voice_url`. Can be: `GET` or `POST`.
    - `:VoiceFallbackUrl` (String.t): The URL that we should call when an error occurs retrieving or executing the TwiML requested by `url`.
    - `:VoiceFallbackMethod` (String.t): The HTTP method we should use to call `voice_fallback_url`. Can be: `GET` or `POST`.
    - `:StatusCallback` (String.t): The URL we should call using the `status_callback_method` to send status information to your application.
    - `:StatusCallbackMethod` (String.t): The HTTP method we should use to call `status_callback`. Can be: `GET` or `POST`.
    - `:VoiceCallerIdLookup` (boolean()): Whether we should look up the caller's caller-ID name from the CNAM database (additional charges apply). Can be: `true` or `false`.
    - `:SmsUrl` (String.t): The URL we should call when the phone number receives an incoming SMS message.
    - `:SmsMethod` (String.t): The HTTP method we should use to call `sms_url`. Can be: `GET` or `POST`.
    - `:SmsFallbackUrl` (String.t): The URL that we should call when an error occurs while retrieving or executing the TwiML from `sms_url`.
    - `:SmsFallbackMethod` (String.t): The HTTP method we should use to call `sms_fallback_url`. Can be: `GET` or `POST`.
    - `:SmsStatusCallback` (String.t): Same as message_status_callback: The URL we should call using a POST method to send status information about SMS messages sent by the application. Deprecated, included for backwards compatibility.
    - `:MessageStatusCallback` (String.t): The URL we should call using a POST method to send message status information to your application.
    - `:PublicApplicationConnectEnabled` (boolean()): Whether to allow other Twilio accounts to dial this applicaton using Dial verb. Can be: `true` or `false`.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountApplication.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_application(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountApplication.t()} | {:error, Tesla.Env.t()}
  def update_application(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :FriendlyName => :form,
      :ApiVersion => :form,
      :VoiceUrl => :form,
      :VoiceMethod => :form,
      :VoiceFallbackUrl => :form,
      :VoiceFallbackMethod => :form,
      :StatusCallback => :form,
      :StatusCallbackMethod => :form,
      :VoiceCallerIdLookup => :form,
      :SmsUrl => :form,
      :SmsMethod => :form,
      :SmsFallbackUrl => :form,
      :SmsFallbackMethod => :form,
      :SmsStatusCallback => :form,
      :MessageStatusCallback => :form,
      :PublicApplicationConnectEnabled => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Applications/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountApplication}
    ])
  end
end
