# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Message do
  @moduledoc """
  API calls for all endpoints tagged `Message`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Send a message

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) creating the Message resource.
  - `to` (String.t): The recipient's phone number in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (for SMS/MMS) or [channel address](https://www.twilio.com/docs/messaging/channels), e.g. `whatsapp:+15552229999`.
  - `opts` (keyword): Optional parameters
    - `:StatusCallback` (String.t): The URL of the endpoint to which Twilio sends [Message status callback requests](https://www.twilio.com/docs/sms/api/message-resource#twilios-request-to-the-statuscallback-url). URL must contain a valid hostname and underscores are not allowed. If you include this parameter with the `messaging_service_sid`, Twilio uses this URL instead of the Status Callback URL of the [Messaging Service](https://www.twilio.com/docs/messaging/api/service-resource). 
    - `:ApplicationSid` (String.t): The SID of the associated [TwiML Application](https://www.twilio.com/docs/usage/api/applications). [Message status callback requests](https://www.twilio.com/docs/sms/api/message-resource#twilios-request-to-the-statuscallback-url) are sent to the TwiML App's `message_status_callback` URL. Note that the `status_callback` parameter of a request takes priority over the `application_sid` parameter; if both are included `application_sid` is ignored.
    - `:MaxPrice` (float()): [OBSOLETE] This parameter will no longer have any effect as of 2024-06-03.
    - `:ProvideFeedback` (boolean()): Boolean indicating whether or not you intend to provide delivery confirmation feedback to Twilio (used in conjunction with the [Message Feedback subresource](https://www.twilio.com/docs/sms/api/message-feedback-resource)). Default value is `false`.
    - `:Attempt` (integer()): Total number of attempts made (including this request) to send the message regardless of the provider used
    - `:ValidityPeriod` (integer()): The maximum length in seconds that the Message can remain in Twilio's outgoing message queue. If a queued Message exceeds the `validity_period`, the Message is not sent. Accepted values are integers from `1` to `36000`. Default value is `36000`. A `validity_period` greater than `5` is recommended. [Learn more about the validity period](https://www.twilio.com/blog/take-more-control-of-outbound-messages-using-validity-period-html)
    - `:ForceDelivery` (boolean()): Reserved
    - `:ContentRetention` (Heckler.Adapters.Twilio.Model.MessageEnumContentRetention.t): 
    - `:AddressRetention` (Heckler.Adapters.Twilio.Model.MessageEnumAddressRetention.t): 
    - `:SmartEncoded` (boolean()): Whether to detect Unicode characters that have a similar GSM-7 character and replace them. Can be: `true` or `false`.
    - `:PersistentAction` ([String.t]): Rich actions for non-SMS/MMS channels. Used for [sending location in WhatsApp messages](https://www.twilio.com/docs/whatsapp/message-features#location-messages-with-whatsapp).
    - `:ShortenUrls` (boolean()): For Messaging Services with [Link Shortening configured](https://www.twilio.com/docs/messaging/features/link-shortening) only: A Boolean indicating whether or not Twilio should shorten links in the `body` of the Message. Default value is `false`. If `true`, the `messaging_service_sid` parameter must also be provided.
    - `:ScheduleType` (Heckler.Adapters.Twilio.Model.MessageEnumScheduleType.t): 
    - `:SendAt` (DateTime.t): The time that Twilio will send the message. Must be in ISO 8601 format.
    - `:SendAsMms` (boolean()): If set to `true`, Twilio delivers the message as a single MMS message, regardless of the presence of media.
    - `:ContentVariables` (String.t): For [Content Editor/API](https://www.twilio.com/docs/content) only: Key-value pairs of [Template variables](https://www.twilio.com/docs/content/using-variables-with-content-api) and their substitution values. `content_sid` parameter must also be provided. If values are not defined in the `content_variables` parameter, the [Template's default placeholder values](https://www.twilio.com/docs/content/content-api-resources#create-templates) are used.
    - `:RiskCheck` (Heckler.Adapters.Twilio.Model.MessageEnumRiskCheck.t): 
    - `:From` (String.t): The sender's Twilio phone number (in [E.164](https://en.wikipedia.org/wiki/E.164) format), [alphanumeric sender ID](https://www.twilio.com/docs/sms/quickstart), [Wireless SIM](https://www.twilio.com/docs/iot/wireless/programmable-wireless-send-machine-machine-sms-commands), [short code](https://www.twilio.com/en-us/messaging/channels/sms/short-codes), or [channel address](https://www.twilio.com/docs/messaging/channels) (e.g., `whatsapp:+15554449999`). The value of the `from` parameter must be a sender that is hosted within Twilio and belongs to the Account creating the Message. If you are using `messaging_service_sid`, this parameter can be empty (Twilio assigns a `from` value from the Messaging Service's Sender Pool) or you can provide a specific sender from your Sender Pool.
    - `:MessagingServiceSid` (String.t): The SID of the [Messaging Service](https://www.twilio.com/docs/messaging/services) you want to associate with the Message. When this parameter is provided and the `from` parameter is omitted, Twilio selects the optimal sender from the Messaging Service's Sender Pool. You may also provide a `from` parameter if you want to use a specific Sender from the Sender Pool.
    - `:Body` (String.t): The text content of the outgoing message. Can be up to 1,600 characters in length. SMS only: If the `body` contains more than 160 [GSM-7](https://www.twilio.com/docs/glossary/what-is-gsm-7-character-encoding) characters (or 70 [UCS-2](https://www.twilio.com/docs/glossary/what-is-ucs-2-character-encoding) characters), the message is segmented and charged accordingly. For long `body` text, consider using the [send_as_mms parameter](https://www.twilio.com/blog/mms-for-long-text-messages).
    - `:MediaUrl` ([String.t]): The URL of media to include in the Message content. `jpeg`, `jpg`, `gif`, and `png` file types are fully supported by Twilio and content is formatted for delivery on destination devices. The media size limit is 5 MB for supported file types (`jpeg`, `jpg`, `png`, `gif`) and 500 KB for [other types](https://www.twilio.com/docs/messaging/guides/accepted-mime-types) of accepted media. To send more than one image in the message, provide multiple `media_url` parameters in the POST request. You can include up to ten `media_url` parameters per message. [International](https://support.twilio.com/hc/en-us/articles/223179808-Sending-and-receiving-MMS-messages) and [carrier](https://support.twilio.com/hc/en-us/articles/223133707-Is-MMS-supported-for-all-carriers-in-US-and-Canada-) limits apply.
    - `:ContentSid` (String.t): For [Content Editor/API](https://www.twilio.com/docs/content) only: The SID of the Content Template to be used with the Message, e.g., `HXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`. If this parameter is not provided, a Content Template is not used. Find the SID in the Console on the Content Editor page. For Content API users, the SID is found in Twilio's response when [creating the Template](https://www.twilio.com/docs/content/content-api-resources#create-templates) or by [fetching your Templates](https://www.twilio.com/docs/content/content-api-resources#fetch-all-content-resources).

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountMessage.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_message(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountMessage.t()} | {:error, Tesla.Env.t()}
  def create_message(connection, account_sid, to, opts \\ []) do
    # Create form with To parameter first
    form_data = %{To: to}

    # Add optional parameters to form
    form_data =
      Enum.reduce(opts, form_data, fn {key, value}, acc ->
        Map.put(acc, key, value)
      end)

    # Create request with explicit form data
    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Messages.json")
      |> add_param(:headers, "content-type", "application/x-www-form-urlencoded")
      |> Map.put(:body, form_data)
      |> Enum.into([])
      |> IO.inspect(pretty: true, limit: :infinity, label: "Twilio Request")

    result =
      connection
      |> IO.inspect(limit: :infinity, pretty: true, label: "Twilio Connection")
      |> Connection.request(request)

    # Log any errors
    case result do
      {:error, %{body: body}} when is_binary(body) ->
        IO.inspect(body, label: "Twilio Error Response")

      {:error, error} ->
        IO.inspect(error, label: "Twilio Error")

      _ ->
        nil
    end

    result
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountMessage}
    ])
  end

  @doc """
  Deletes a Message resource from your account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource
  - `sid` (String.t): The SID of the Message resource you wish to delete
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_message(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_message(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/Messages/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch a specific Message

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resource
  - `sid` (String.t): The SID of the Message resource to be fetched
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountMessage.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_message(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountMessage.t()} | {:error, Tesla.Env.t()}
  def fetch_message(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Messages/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountMessage}
    ])
  end

  @doc """
  Retrieve a list of Message resources associated with a Twilio Account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) associated with the Message resources.
  - `opts` (keyword): Optional parameters
    - `:To` (String.t): Filter by recipient. For example: Set this `to` parameter to `+15558881111` to retrieve a list of Message resources with `to` properties of `+15558881111`
    - `:From` (String.t): Filter by sender. For example: Set this `from` parameter to `+15552229999` to retrieve a list of Message resources with `from` properties of `+15552229999`
    - `:DateSent` (DateTime.t): Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    - `:"DateSent<"` (DateTime.t): Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    - `:"DateSent>"` (DateTime.t): Filter by Message `sent_date`. Accepts GMT dates in the following formats: `YYYY-MM-DD` (to find Messages with a specific `sent_date`), `<=YYYY-MM-DD` (to find Messages with `sent_date`s on and before a specific date), and `>=YYYY-MM-DD` (to find Messages with `sent_dates` on and after a specific date).
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListMessageResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_message(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListMessageResponse.t()} | {:error, Tesla.Env.t()}
  def list_message(connection, account_sid, opts \\ []) do
    optional_params = %{
      :To => :query,
      :From => :query,
      :DateSent => :query,
      :"DateSent&lt;" => :query,
      :"DateSent&gt;" => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Messages.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListMessageResponse}
    ])
  end

  @doc """
  Update a Message resource (used to redact Message `body` text and to cancel not-yet-sent messages)

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Message resources to update.
  - `sid` (String.t): The SID of the Message resource to be updated
  - `opts` (keyword): Optional parameters
    - `:Body` (String.t): The new `body` of the Message resource. To redact the text content of a Message, this parameter's value must be an empty string
    - `:Status` (Heckler.Adapters.Twilio.Model.MessageEnumUpdateStatus.t): 

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountMessage.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_message(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountMessage.t()} | {:error, Tesla.Env.t()}
  def update_message(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :Body => :form,
      :Status => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Messages/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountMessage}
    ])
  end
end
