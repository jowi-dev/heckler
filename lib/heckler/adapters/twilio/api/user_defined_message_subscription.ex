# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.UserDefinedMessageSubscription do
  @moduledoc """
  API calls for all endpoints tagged `UserDefinedMessageSubscription`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Subscribe to User Defined Messages for a given Call SID.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
  - `call_sid` (String.t): The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Messages subscription is associated with. This refers to the Call SID that is producing the user defined messages.
  - `callback` (String.t): The URL we should call using the `method` to send user defined events to your application. URLs must contain a valid hostname (underscores are not permitted).
  - `opts` (keyword): Optional parameters
    - `:IdempotencyKey` (String.t): A unique string value to identify API call. This should be a unique string value per API call and can be a randomly generated.
    - `:Method` (String.t): The HTTP method Twilio will use when requesting the above `Url`. Either `GET` or `POST`. Default is `POST`.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountCallUserDefinedMessageSubscription.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_user_defined_message_subscription(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountCallUserDefinedMessageSubscription.t()}
          | {:error, Tesla.Env.t()}
  def create_user_defined_message_subscription(
        connection,
        account_sid,
        call_sid,
        callback,
        opts \\ []
      ) do
    optional_params = %{
      :IdempotencyKey => :form,
      :Method => :form
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/UserDefinedMessageSubscriptions.json"
      )
      |> add_param(:form, :Callback, callback)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountCallUserDefinedMessageSubscription}
    ])
  end

  @doc """
  Delete a specific User Defined Message Subscription.

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that subscribed to the User Defined Messages.
  - `call_sid` (String.t): The SID of the [Call](https://www.twilio.com/docs/voice/api/call-resource) the User Defined Message Subscription is associated with. This refers to the Call SID that is producing the User Defined Messages.
  - `sid` (String.t): The SID that uniquely identifies this User Defined Message Subscription.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_user_defined_message_subscription(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_user_defined_message_subscription(
        connection,
        account_sid,
        call_sid,
        sid,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Calls/#{call_sid}/UserDefinedMessageSubscriptions/#{sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end
end
