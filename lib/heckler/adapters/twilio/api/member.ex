# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Member do
  @moduledoc """
  API calls for all endpoints tagged `Member`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Fetch a specific member from the queue

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to fetch.
  - `queue_sid` (String.t): The SID of the Queue in which to find the members to fetch.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountQueueMember.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_member(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountQueueMember.t()} | {:error, Tesla.Env.t()}
  def fetch_member(connection, account_sid, queue_sid, call_sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Queues/#{queue_sid}/Members/#{call_sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountQueueMember}
    ])
  end

  @doc """
  Retrieve the members of the queue

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to read.
  - `queue_sid` (String.t): The SID of the Queue in which to find the members
  - `opts` (keyword): Optional parameters
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListMemberResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_member(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListMemberResponse.t()} | {:error, Tesla.Env.t()}
  def list_member(connection, account_sid, queue_sid, opts \\ []) do
    optional_params = %{
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Queues/#{queue_sid}/Members.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListMemberResponse}
    ])
  end

  @doc """
  Dequeue a member from a queue and have the member's call begin executing the TwiML document at that URL

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Member resource(s) to update.
  - `queue_sid` (String.t): The SID of the Queue in which to find the members to update.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resource(s) to update.
  - `url` (String.t): The absolute URL of the Queue resource.
  - `opts` (keyword): Optional parameters
    - `:Method` (String.t): How to pass the update request data. Can be `GET` or `POST` and the default is `POST`. `POST` sends the data as encoded form data and `GET` sends the data as query parameters.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountQueueMember.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_member(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, Heckler.Adapters.Twilio.Model.AccountQueueMember.t()} | {:error, Tesla.Env.t()}
  def update_member(connection, account_sid, queue_sid, call_sid, url, opts \\ []) do
    optional_params = %{
      :Method => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Queues/#{queue_sid}/Members/#{call_sid}.json")
      |> add_param(:form, :Url, url)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountQueueMember}
    ])
  end
end
