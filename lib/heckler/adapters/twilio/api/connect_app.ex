# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.ConnectApp do
  @moduledoc """
  API calls for all endpoints tagged `ConnectApp`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Delete an instance of a connect-app

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_connect_app(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_connect_app(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/ConnectApps/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch an instance of a connect-app

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the ConnectApp resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConnectApp.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_connect_app(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConnectApp.t()} | {:error, Tesla.Env.t()}
  def fetch_connect_app(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/ConnectApps/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConnectApp}
    ])
  end

  @doc """
  Retrieve a list of connect-apps belonging to the account used to make the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to read.
  - `opts` (keyword): Optional parameters
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListConnectAppResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_connect_app(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListConnectAppResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_connect_app(connection, account_sid, opts \\ []) do
    optional_params = %{
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/ConnectApps.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListConnectAppResponse}
    ])
  end

  @doc """
  Update a connect-app with the specified parameters

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the ConnectApp resources to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the ConnectApp resource to update.
  - `opts` (keyword): Optional parameters
    - `:AuthorizeRedirectUrl` (String.t): The URL to redirect the user to after we authenticate the user and obtain authorization to access the Connect App.
    - `:CompanyName` (String.t): The company name to set for the Connect App.
    - `:DeauthorizeCallbackMethod` (String.t): The HTTP method to use when calling `deauthorize_callback_url`.
    - `:DeauthorizeCallbackUrl` (String.t): The URL to call using the `deauthorize_callback_method` to de-authorize the Connect App.
    - `:Description` (String.t): A description of the Connect App.
    - `:FriendlyName` (String.t): A descriptive string that you create to describe the resource. It can be up to 64 characters long.
    - `:HomepageUrl` (String.t): A public URL where users can obtain more information about this Connect App.
    - `:Permissions` ([Heckler.Adapters.Twilio.Model.ConnectAppEnumPermission.t]): A comma-separated list of the permissions you will request from the users of this ConnectApp.  Can include: `get-all` and `post-all`.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConnectApp.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_connect_app(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConnectApp.t()} | {:error, Tesla.Env.t()}
  def update_connect_app(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :AuthorizeRedirectUrl => :form,
      :CompanyName => :form,
      :DeauthorizeCallbackMethod => :form,
      :DeauthorizeCallbackUrl => :form,
      :Description => :form,
      :FriendlyName => :form,
      :HomepageUrl => :form,
      :Permissions => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/ConnectApps/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConnectApp}
    ])
  end
end
