# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.SigningKey do
  @moduledoc """
  API calls for all endpoints tagged `SigningKey`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): 
  - `sid` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_signing_key(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_signing_key(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/SigningKeys/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): 
  - `sid` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSigningKey.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_signing_key(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSigningKey.t()} | {:error, Tesla.Env.t()}
  def fetch_signing_key(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/SigningKeys/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountSigningKey}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListSigningKeyResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_signing_key(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListSigningKeyResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_signing_key(connection, account_sid, opts \\ []) do
    optional_params = %{
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/SigningKeys.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListSigningKeyResponse}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): 
  - `sid` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:FriendlyName` (String.t): 

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSigningKey.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_signing_key(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSigningKey.t()} | {:error, Tesla.Env.t()}
  def update_signing_key(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :FriendlyName => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/SigningKeys/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountSigningKey}
    ])
  end
end
