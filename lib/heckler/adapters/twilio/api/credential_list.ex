# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.CredentialList do
  @moduledoc """
  API calls for all endpoints tagged `CredentialList`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Create a Credential List

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the Account that is responsible for this resource.
  - `friendly_name` (String.t): A human readable descriptive text that describes the CredentialList, up to 64 characters long.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_sip_credential_list(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList.t()}
          | {:error, Tesla.Env.t()}
  def create_sip_credential_list(connection, account_sid, friendly_name, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/SIP/CredentialLists.json")
      |> add_param(:form, :FriendlyName, friendly_name)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList}
    ])
  end

  @doc """
  Delete a Credential List

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the Account that is responsible for this resource.
  - `sid` (String.t): The credential list Sid that uniquely identifies this resource
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_sip_credential_list(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_sip_credential_list(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/SIP/CredentialLists/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Get a Credential List

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the Account that is responsible for this resource.
  - `sid` (String.t): The credential list Sid that uniquely identifies this resource
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_sip_credential_list(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList.t()}
          | {:error, Tesla.Env.t()}
  def fetch_sip_credential_list(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/SIP/CredentialLists/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList}
    ])
  end

  @doc """
  Get All Credential Lists

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the Account that is responsible for this resource.
  - `opts` (keyword): Optional parameters
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListSipCredentialListResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_sip_credential_list(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListSipCredentialListResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_sip_credential_list(connection, account_sid, opts \\ []) do
    optional_params = %{
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/SIP/CredentialLists.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListSipCredentialListResponse}
    ])
  end

  @doc """
  Update a Credential List

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The unique id of the Account that is responsible for this resource.
  - `sid` (String.t): The credential list Sid that uniquely identifies this resource
  - `friendly_name` (String.t): A human readable descriptive text for a CredentialList, up to 64 characters long.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_sip_credential_list(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList.t()}
          | {:error, Tesla.Env.t()}
  def update_sip_credential_list(connection, account_sid, sid, friendly_name, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/SIP/CredentialLists/#{sid}.json")
      |> add_param(:form, :FriendlyName, friendly_name)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountSipSipCredentialList}
    ])
  end
end
