# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Address do
  @moduledoc """
  API calls for all endpoints tagged `Address`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will be responsible for the new Address resource.
  - `customer_name` (String.t): The name to associate with the new address.
  - `street` (String.t): The number and street address of the new address.
  - `city` (String.t): The city of the new address.
  - `region` (String.t): The state or region of the new address.
  - `postal_code` (String.t): The postal code of the new address.
  - `iso_country` (String.t): The ISO country code of the new address.
  - `opts` (keyword): Optional parameters
    - `:FriendlyName` (String.t): A descriptive string that you create to describe the new address. It can be up to 64 characters long.
    - `:EmergencyEnabled` (boolean()): Whether to enable emergency calling on the new address. Can be: `true` or `false`.
    - `:AutoCorrectAddress` (boolean()): Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    - `:StreetSecondary` (String.t): The additional number and street address of the address.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountAddress.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_address(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) :: {:ok, Heckler.Adapters.Twilio.Model.AccountAddress.t()} | {:error, Tesla.Env.t()}
  def create_address(
        connection,
        account_sid,
        customer_name,
        street,
        city,
        region,
        postal_code,
        iso_country,
        opts \\ []
      ) do
    optional_params = %{
      :FriendlyName => :form,
      :EmergencyEnabled => :form,
      :AutoCorrectAddress => :form,
      :StreetSecondary => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Addresses.json")
      |> add_param(:form, :CustomerName, customer_name)
      |> add_param(:form, :Street, street)
      |> add_param(:form, :City, city)
      |> add_param(:form, :Region, region)
      |> add_param(:form, :PostalCode, postal_code)
      |> add_param(:form, :IsoCountry, iso_country)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountAddress}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to delete.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Address resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_address(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_address(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/Addresses/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Address resource to fetch.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountAddress.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_address(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountAddress.t()} | {:error, Tesla.Env.t()}
  def fetch_address(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Addresses/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountAddress}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to read.
  - `opts` (keyword): Optional parameters
    - `:CustomerName` (String.t): The `customer_name` of the Address resources to read.
    - `:FriendlyName` (String.t): The string that identifies the Address resources to read.
    - `:IsoCountry` (String.t): The ISO country code of the Address resources to read.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListAddressResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_address(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListAddressResponse.t()} | {:error, Tesla.Env.t()}
  def list_address(connection, account_sid, opts \\ []) do
    optional_params = %{
      :CustomerName => :query,
      :FriendlyName => :query,
      :IsoCountry => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Addresses.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListAddressResponse}
    ])
  end

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that is responsible for the Address resource to update.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Address resource to update.
  - `opts` (keyword): Optional parameters
    - `:FriendlyName` (String.t): A descriptive string that you create to describe the address. It can be up to 64 characters long.
    - `:CustomerName` (String.t): The name to associate with the address.
    - `:Street` (String.t): The number and street address of the address.
    - `:City` (String.t): The city of the address.
    - `:Region` (String.t): The state or region of the address.
    - `:PostalCode` (String.t): The postal code of the address.
    - `:EmergencyEnabled` (boolean()): Whether to enable emergency calling on the address. Can be: `true` or `false`.
    - `:AutoCorrectAddress` (boolean()): Whether we should automatically correct the address. Can be: `true` or `false` and the default is `true`. If empty or `true`, we will correct the address you provide if necessary. If `false`, we won't alter the address you provide.
    - `:StreetSecondary` (String.t): The additional number and street address of the address.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountAddress.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_address(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountAddress.t()} | {:error, Tesla.Env.t()}
  def update_address(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :FriendlyName => :form,
      :CustomerName => :form,
      :Street => :form,
      :City => :form,
      :Region => :form,
      :PostalCode => :form,
      :EmergencyEnabled => :form,
      :AutoCorrectAddress => :form,
      :StreetSecondary => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/2010-04-01/Accounts/#{account_sid}/Addresses/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountAddress}
    ])
  end
end
