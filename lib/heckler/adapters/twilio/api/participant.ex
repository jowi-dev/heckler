# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Participant do
  @moduledoc """
  API calls for all endpoints tagged `Participant`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """


  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that will create the resource.
  - `conference_sid` (String.t): The SID of the participant's conference.
  - `from` (String.t): The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `from` must also be a phone number. If `to` is sip address, this value of `from` should be a username portion to be used to populate the P-Asserted-Identity header that is passed to the SIP endpoint.
  - `to` (String.t): The phone number, SIP address, or Client identifier that received this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). SIP addresses are formatted as `sip:name@company.com`. Client identifiers are formatted `client:name`. [Custom parameters](https://www.twilio.com/docs/voice/api/conference-participant-resource#custom-parameters) may also be specified.
  - `opts` (keyword): Optional parameters
    - `:StatusCallback` (String.t): The URL we should call using the `status_callback_method` to send status information to your application.
    - `:StatusCallbackMethod` (String.t): The HTTP method we should use to call `status_callback`. Can be: `GET` and `POST` and defaults to `POST`.
    - `:StatusCallbackEvent` ([String.t]): The conference state changes that should generate a call to `status_callback`. Can be: `initiated`, `ringing`, `answered`, and `completed`. Separate multiple values with a space. The default value is `completed`.
    - `:Label` (String.t): A label for this participant. If one is supplied, it may subsequently be used to fetch, update or delete the participant.
    - `:Timeout` (integer()): The number of seconds that we should allow the phone to ring before assuming there is no answer. Can be an integer between `5` and `600`, inclusive. The default value is `60`. We always add a 5-second timeout buffer to outgoing calls, so  value of 10 would result in an actual timeout that was closer to 15 seconds.
    - `:Record` (boolean()): Whether to record the participant and their conferences, including the time between conferences. Can be `true` or `false` and the default is `false`.
    - `:Muted` (boolean()): Whether the agent is muted in the conference. Can be `true` or `false` and the default is `false`.
    - `:Beep` (String.t): Whether to play a notification beep to the conference when the participant joins. Can be: `true`, `false`, `onEnter`, or `onExit`. The default value is `true`.
    - `:StartConferenceOnEnter` (boolean()): Whether to start the conference when the participant joins, if it has not already started. Can be: `true` or `false` and the default is `true`. If `false` and the conference has not started, the participant is muted and hears background music until another participant starts the conference.
    - `:EndConferenceOnExit` (boolean()): Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    - `:WaitUrl` (String.t): The URL we should call using the `wait_method` for the music to play while participants are waiting for the conference to start. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    - `:WaitMethod` (String.t): The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
    - `:EarlyMedia` (boolean()): Whether to allow an agent to hear the state of the outbound call, including ringing or disconnect messages. Can be: `true` or `false` and defaults to `true`.
    - `:MaxParticipants` (integer()): The maximum number of participants in the conference. Can be a positive integer from `2` to `250`. The default value is `250`.
    - `:ConferenceRecord` (String.t): Whether to record the conference the participant is joining. Can be: `true`, `false`, `record-from-start`, and `do-not-record`. The default value is `false`.
    - `:ConferenceTrim` (String.t): Whether to trim leading and trailing silence from the conference recording. Can be: `trim-silence` or `do-not-trim` and defaults to `trim-silence`.
    - `:ConferenceStatusCallback` (String.t): The URL we should call using the `conference_status_callback_method` when the conference events in `conference_status_callback_event` occur. Only the value set by the first participant to join the conference is used. Subsequent `conference_status_callback` values are ignored.
    - `:ConferenceStatusCallbackMethod` (String.t): The HTTP method we should use to call `conference_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:ConferenceStatusCallbackEvent` ([String.t]): The conference state changes that should generate a call to `conference_status_callback`. Can be: `start`, `end`, `join`, `leave`, `mute`, `hold`, `modify`, `speaker`, and `announcement`. Separate multiple values with a space. Defaults to `start end`.
    - `:RecordingChannels` (String.t): The recording channels for the final recording. Can be: `mono` or `dual` and the default is `mono`.
    - `:RecordingStatusCallback` (String.t): The URL that we should call using the `recording_status_callback_method` when the recording status changes.
    - `:RecordingStatusCallbackMethod` (String.t): The HTTP method we should use when we call `recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:SipAuthUsername` (String.t): The SIP username used for authentication.
    - `:SipAuthPassword` (String.t): The SIP password for authentication.
    - `:Region` (String.t): The [region](https://support.twilio.com/hc/en-us/articles/223132167-How-global-low-latency-routing-and-region-selection-work-for-conferences-and-Client-calls) where we should mix the recorded audio. Can be:`us1`, `ie1`, `de1`, `sg1`, `br1`, `au1`, or `jp1`.
    - `:ConferenceRecordingStatusCallback` (String.t): The URL we should call using the `conference_recording_status_callback_method` when the conference recording is available.
    - `:ConferenceRecordingStatusCallbackMethod` (String.t): The HTTP method we should use to call `conference_recording_status_callback`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:RecordingStatusCallbackEvent` ([String.t]): The recording state changes that should generate a call to `recording_status_callback`. Can be: `started`, `in-progress`, `paused`, `resumed`, `stopped`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`.
    - `:ConferenceRecordingStatusCallbackEvent` ([String.t]): The conference recording state changes that generate a call to `conference_recording_status_callback`. Can be: `in-progress`, `completed`, `failed`, and `absent`. Separate multiple values with a space, ex: `'in-progress completed failed'`
    - `:Coaching` (boolean()): Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    - `:CallSidToCoach` (String.t): The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.
    - `:JitterBufferSize` (String.t): Jitter buffer size for the connecting participant. Twilio will use this setting to apply Jitter Buffer before participant's audio is mixed into the conference. Can be: `off`, `small`, `medium`, and `large`. Default to `large`.
    - `:Byoc` (String.t): The SID of a BYOC (Bring Your Own Carrier) trunk to route this call with. Note that `byoc` is only meaningful when `to` is a phone number; it will otherwise be ignored. (Beta)
    - `:CallerId` (String.t): The phone number, Client identifier, or username portion of SIP address that made this call. Phone numbers are in [E.164](https://www.twilio.com/docs/glossary/what-e164) format (e.g., +16175551212). Client identifiers are formatted `client:name`. If using a phone number, it must be a Twilio number or a Verified [outgoing caller id](https://www.twilio.com/docs/voice/api/outgoing-caller-ids) for your account. If the `to` parameter is a phone number, `callerId` must also be a phone number. If `to` is sip address, this value of `callerId` should be a username portion to be used to populate the From header that is passed to the SIP endpoint.
    - `:CallReason` (String.t): The Reason for the outgoing call. Use it to specify the purpose of the call that is presented on the called party's phone. (Branded Calls Beta)
    - `:RecordingTrack` (String.t): The audio track to record for the call. Can be: `inbound`, `outbound` or `both`. The default is `both`. `inbound` records the audio that is received by Twilio. `outbound` records the audio that is sent from Twilio. `both` records the audio that is received and sent by Twilio.
    - `:TimeLimit` (integer()): The maximum duration of the call in seconds. Constraints depend on account and configuration.
    - `:MachineDetection` (String.t): Whether to detect if a human, answering machine, or fax has picked up the call. Can be: `Enable` or `DetectMessageEnd`. Use `Enable` if you would like us to return `AnsweredBy` as soon as the called party is identified. Use `DetectMessageEnd`, if you would like to leave a message on an answering machine. For more information, see [Answering Machine Detection](https://www.twilio.com/docs/voice/answering-machine-detection).
    - `:MachineDetectionTimeout` (integer()): The number of seconds that we should attempt to detect an answering machine before timing out and sending a voice request with `AnsweredBy` of `unknown`. The default timeout is 30 seconds.
    - `:MachineDetectionSpeechThreshold` (integer()): The number of milliseconds that is used as the measuring stick for the length of the speech activity, where durations lower than this value will be interpreted as a human and longer than this value as a machine. Possible Values: 1000-6000. Default: 2400.
    - `:MachineDetectionSpeechEndThreshold` (integer()): The number of milliseconds of silence after speech activity at which point the speech activity is considered complete. Possible Values: 500-5000. Default: 1200.
    - `:MachineDetectionSilenceTimeout` (integer()): The number of milliseconds of initial silence after which an `unknown` AnsweredBy result will be returned. Possible Values: 2000-10000. Default: 5000.
    - `:AmdStatusCallback` (String.t): The URL that we should call using the `amd_status_callback_method` to notify customer application whether the call was answered by human, machine or fax.
    - `:AmdStatusCallbackMethod` (String.t): The HTTP method we should use when calling the `amd_status_callback` URL. Can be: `GET` or `POST` and the default is `POST`.
    - `:Trim` (String.t): Whether to trim any leading and trailing silence from the participant recording. Can be: `trim-silence` or `do-not-trim` and the default is `trim-silence`.
    - `:CallToken` (String.t): A token string needed to invoke a forwarded call. A call_token is generated when an incoming call is received on a Twilio number. Pass an incoming call's call_token value to a forwarded call via the call_token parameter when creating a new call. A forwarded call should bear the same CallerID of the original incoming call.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec create_participant(
          Tesla.Env.client(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant.t()}
          | {:error, Tesla.Env.t()}
  def create_participant(connection, account_sid, conference_sid, from, to, opts \\ []) do
    optional_params = %{
      :StatusCallback => :form,
      :StatusCallbackMethod => :form,
      :StatusCallbackEvent => :form,
      :Label => :form,
      :Timeout => :form,
      :Record => :form,
      :Muted => :form,
      :Beep => :form,
      :StartConferenceOnEnter => :form,
      :EndConferenceOnExit => :form,
      :WaitUrl => :form,
      :WaitMethod => :form,
      :EarlyMedia => :form,
      :MaxParticipants => :form,
      :ConferenceRecord => :form,
      :ConferenceTrim => :form,
      :ConferenceStatusCallback => :form,
      :ConferenceStatusCallbackMethod => :form,
      :ConferenceStatusCallbackEvent => :form,
      :RecordingChannels => :form,
      :RecordingStatusCallback => :form,
      :RecordingStatusCallbackMethod => :form,
      :SipAuthUsername => :form,
      :SipAuthPassword => :form,
      :Region => :form,
      :ConferenceRecordingStatusCallback => :form,
      :ConferenceRecordingStatusCallbackMethod => :form,
      :RecordingStatusCallbackEvent => :form,
      :ConferenceRecordingStatusCallbackEvent => :form,
      :Coaching => :form,
      :CallSidToCoach => :form,
      :JitterBufferSize => :form,
      :Byoc => :form,
      :CallerId => :form,
      :CallReason => :form,
      :RecordingTrack => :form,
      :TimeLimit => :form,
      :MachineDetection => :form,
      :MachineDetectionTimeout => :form,
      :MachineDetectionSpeechThreshold => :form,
      :MachineDetectionSpeechEndThreshold => :form,
      :MachineDetectionSilenceTimeout => :form,
      :AmdStatusCallback => :form,
      :AmdStatusCallbackMethod => :form,
      :Trim => :form,
      :CallToken => :form
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Participants.json"
      )
      |> add_param(:form, :From, from)
      |> add_param(:form, :To, to)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant}
    ])
  end

  @doc """
  Kick a participant from a given conference

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to delete.
  - `conference_sid` (String.t): The SID of the conference with the participants to delete.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to delete. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_participant(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_participant(connection, account_sid, conference_sid, call_sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Participants/#{call_sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch an instance of a participant

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resource to fetch.
  - `conference_sid` (String.t): The SID of the conference with the participant to fetch.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to fetch. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_participant(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant.t()}
          | {:error, Tesla.Env.t()}
  def fetch_participant(connection, account_sid, conference_sid, call_sid, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Participants/#{call_sid}.json"
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant}
    ])
  end

  @doc """
  Retrieve a list of participants belonging to the account used to make the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to read.
  - `conference_sid` (String.t): The SID of the conference with the participants to read.
  - `opts` (keyword): Optional parameters
    - `:Muted` (boolean()): Whether to return only participants that are muted. Can be: `true` or `false`.
    - `:Hold` (boolean()): Whether to return only participants that are on hold. Can be: `true` or `false`.
    - `:Coaching` (boolean()): Whether to return only participants who are coaching another call. Can be: `true` or `false`.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListParticipantResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_participant(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListParticipantResponse.t()}
          | {:error, Tesla.Env.t()}
  def list_participant(connection, account_sid, conference_sid, opts \\ []) do
    optional_params = %{
      :Muted => :query,
      :Hold => :query,
      :Coaching => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Participants.json"
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListParticipantResponse}
    ])
  end

  @doc """
  Update the properties of the participant

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Participant resources to update.
  - `conference_sid` (String.t): The SID of the conference with the participant to update.
  - `call_sid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID or label of the participant to update. Non URL safe characters in a label must be percent encoded, for example, a space character is represented as %20.
  - `opts` (keyword): Optional parameters
    - `:Muted` (boolean()): Whether the participant should be muted. Can be `true` or `false`. `true` will mute the participant, and `false` will un-mute them. Anything value other than `true` or `false` is interpreted as `false`.
    - `:Hold` (boolean()): Whether the participant should be on hold. Can be: `true` or `false`. `true` puts the participant on hold, and `false` lets them rejoin the conference.
    - `:HoldUrl` (String.t): The URL we call using the `hold_method` for music that plays when the participant is on hold. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    - `:HoldMethod` (String.t): The HTTP method we should use to call `hold_url`. Can be: `GET` or `POST` and the default is `GET`.
    - `:AnnounceUrl` (String.t): The URL we call using the `announce_method` for an announcement to the participant. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs.
    - `:AnnounceMethod` (String.t): The HTTP method we should use to call `announce_url`. Can be: `GET` or `POST` and defaults to `POST`.
    - `:WaitUrl` (String.t): The URL we call using the `wait_method` for the music to play while participants are waiting for the conference to start. The URL may return an MP3 file, a WAV file, or a TwiML document that contains `<Play>`, `<Say>`, `<Pause>`, or `<Redirect>` verbs. The default value is the URL of our standard hold music. [Learn more about hold music](https://www.twilio.com/labs/twimlets/holdmusic).
    - `:WaitMethod` (String.t): The HTTP method we should use to call `wait_url`. Can be `GET` or `POST` and the default is `POST`. When using a static audio file, this should be `GET` so that we can cache the file.
    - `:BeepOnExit` (boolean()): Whether to play a notification beep to the conference when the participant exits. Can be: `true` or `false`.
    - `:EndConferenceOnExit` (boolean()): Whether to end the conference when the participant leaves. Can be: `true` or `false` and defaults to `false`.
    - `:Coaching` (boolean()): Whether the participant is coaching another call. Can be: `true` or `false`. If not present, defaults to `false` unless `call_sid_to_coach` is defined. If `true`, `call_sid_to_coach` must be defined.
    - `:CallSidToCoach` (String.t): The SID of the participant who is being `coached`. The participant being coached is the only participant who can hear the participant who is `coaching`.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec update_participant(Tesla.Env.client(), String.t(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant.t()}
          | {:error, Tesla.Env.t()}
  def update_participant(connection, account_sid, conference_sid, call_sid, opts \\ []) do
    optional_params = %{
      :Muted => :form,
      :Hold => :form,
      :HoldUrl => :form,
      :HoldMethod => :form,
      :AnnounceUrl => :form,
      :AnnounceMethod => :form,
      :WaitUrl => :form,
      :WaitMethod => :form,
      :BeepOnExit => :form,
      :EndConferenceOnExit => :form,
      :Coaching => :form,
      :CallSidToCoach => :form
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/2010-04-01/Accounts/#{account_sid}/Conferences/#{conference_sid}/Participants/#{call_sid}.json"
      )
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountConferenceParticipant}
    ])
  end
end
