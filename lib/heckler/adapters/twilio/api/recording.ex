# NOTE: This file is auto generated by OpenAPI Generator 7.10.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Heckler.Adapters.Twilio.Api.Recording do
  @moduledoc """
  API calls for all endpoints tagged `Recording`.
  """

  alias Heckler.Adapters.Twilio.Connection
  import Heckler.Adapters.Twilio.RequestBuilder

  @doc """
  Delete a recording from your account

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to delete.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Recording resource to delete.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec delete_recording(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, nil} | {:error, Tesla.Env.t()}
  def delete_recording(connection, account_sid, sid, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/2010-04-01/Accounts/#{account_sid}/Recordings/#{sid}.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false}
    ])
  end

  @doc """
  Fetch an instance of a recording

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resource to fetch.
  - `sid` (String.t): The Twilio-provided string that uniquely identifies the Recording resource to fetch.
  - `opts` (keyword): Optional parameters
    - `:IncludeSoftDeleted` (boolean()): A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.AccountRecording.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec fetch_recording(Tesla.Env.client(), String.t(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.AccountRecording.t()} | {:error, Tesla.Env.t()}
  def fetch_recording(connection, account_sid, sid, opts \\ []) do
    optional_params = %{
      :IncludeSoftDeleted => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Recordings/#{sid}.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.AccountRecording}
    ])
  end

  @doc """
  Retrieve a list of recordings belonging to the account used to make the request

  ### Parameters

  - `connection` (Heckler.Adapters.Twilio.Connection): Connection to server
  - `account_sid` (String.t): The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Recording resources to read.
  - `opts` (keyword): Optional parameters
    - `:DateCreated` (DateTime.t): Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    - `:"DateCreated<"` (DateTime.t): Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    - `:"DateCreated>"` (DateTime.t): Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
    - `:CallSid` (String.t): The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
    - `:ConferenceSid` (String.t): The Conference SID that identifies the conference associated with the recording to read.
    - `:IncludeSoftDeleted` (boolean()): A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
    - `:PageSize` (integer()): How many resources to return in each list page. The default is 50, and the maximum is 1000.
    - `:Page` (integer()): The page index. This value is simply for client state.
    - `:PageToken` (String.t): The page token. This is provided by the API.

  ### Returns

  - `{:ok, Heckler.Adapters.Twilio.Model.ListRecordingResponse.t()}` on success
  - `{:error, Tesla.Env.t()}` on failure
  """
  @spec list_recording(Tesla.Env.client(), String.t(), keyword()) ::
          {:ok, Heckler.Adapters.Twilio.Model.ListRecordingResponse.t()} | {:error, Tesla.Env.t()}
  def list_recording(connection, account_sid, opts \\ []) do
    optional_params = %{
      :DateCreated => :query,
      :"DateCreated&lt;" => :query,
      :"DateCreated&gt;" => :query,
      :CallSid => :query,
      :ConferenceSid => :query,
      :IncludeSoftDeleted => :query,
      :PageSize => :query,
      :Page => :query,
      :PageToken => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/2010-04-01/Accounts/#{account_sid}/Recordings.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Heckler.Adapters.Twilio.Model.ListRecordingResponse}
    ])
  end
end
